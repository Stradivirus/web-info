{
    "advantages": [
      {
        "title": "메모리 안전성",
        "details": [
          "소유권 시스템과 대여자 개념으로 메모리 관련 버그를 컴파일 시점에서 방지합니다.",
          "가비지 컬렉션 없이도 메모리 안전성을 보장합니다."
        ]
      },
      {
        "title": "동시성 처리",
        "details": [
          "타입 시스템과 소유권 모델을 통해 스레드 안전성을 보장합니다.",
          "제로 비용 추상화로 효율적인 동시성 프로그래밍이 가능합니다."
        ]
      },
      {
        "title": "높은 성능",
        "details": [
          "C/C++와 비슷한 수준의 실행 속도를 제공합니다.",
          "제로 비용 추상화로 고수준의 프로그래밍 기능을 저수준 성능으로 구현합니다."
        ]
      },
      {
        "title": "크로스 플랫폼 지원",
        "details": [
          "WebAssembly를 포함한 다양한 플랫폼 지원",
          "효율적인 크로스 컴파일 도구 제공"
        ]
      },
      {
        "title": "풍부한 도구 생태계",
        "details": [
          "Cargo를 통한 강력한 패키지 관리와 빌드 시스템",
          "내장된 테스트 프레임워크와 문서화 도구"
        ]
      }
    ],
    "disadvantages": [
      {
        "title": "가파른 학습 곡선",
        "details": [
          "소유권 개념과 라이프타임 이해에 시간이 많이 소요됩니다.",
          "엄격한 컴파일러로 인해 초기 진입장벽이 높습니다."
        ]
      },
      {
        "title": "긴 컴파일 시간",
        "details": [
          "엄격한 타입 체크와 최적화로 인해 컴파일 시간이 깁니다.",
          "반복적인 개발 과정에서 생산성에 영향을 줄 수 있습니다."
        ]
      },
      {
        "title": "생태계 성숙도",
        "details": [
          "다른 메이저 언어들에 비해 라이브러리 생태계가 상대적으로 작습니다.",
          "일부 도메인에서는 필요한 라이브러리를 찾기 어려울 수 있습니다."
        ]
      },
      {
        "title": "코드 복잡성",
        "details": [
          "소유권과 라이프타임 관리로 인해 코드가 복잡해질 수 있습니다.",
          "간단한 작업도 더 많은 코드가 필요할 수 있습니다."
        ]
      }
    ],
    "frameworks": [
      {
        "name": "Actix-web",
        "advantages": [
          "매우 높은 성능의 웹 프레임워크",
          "비동기 처리 지원",
          "유연한 미들웨어 시스템",
          "안정적이고 성숙한 생태계"
        ],
        "disadvantages": [
          "상대적으로 복잡한 API",
          "비동기 프로그래밍 이해 필요",
          "다른 웹 프레임워크에 비해 진입장벽이 높음"
        ],
        "bestFor": [
          "고성능이 필요한 웹 서비스",
          "마이크로서비스 아키텍처",
          "실시간 웹 애플리케이션"
        ]
      },
      {
        "name": "Rocket",
        "advantages": [
          "직관적이고 사용하기 쉬운 API",
          "강력한 타입 시스템 활용",
          "자동화된 요청 처리",
          "풍부한 문서화"
        ],
        "disadvantages": [
          "Nightly Rust 필요 (안정 버전에서 일부 기능 제한)",
          "Actix-web에 비해 상대적으로 낮은 성능",
          "제한적인 커스터마이징"
        ],
        "bestFor": [
          "빠른 웹 애플리케이션 개발",
          "프로토타이핑",
          "중소규모 웹 프로젝트"
        ]
      },
      {
        "name": "Tokio",
        "advantages": [
          "높은 성능의 비동기 런타임",
          "풍부한 네트워킹 기능",
          "확장성 있는 구조",
          "활발한 커뮤니티"
        ],
        "disadvantages": [
          "비동기 프로그래밍의 복잡성",
          "초기 학습이 어려움",
          "세부적인 튜닝이 필요할 수 있음"
        ],
        "bestFor": [
          "네트워크 서비스",
          "고성능 비동기 애플리케이션",
          "시스템 프로그래밍"
        ]
      }
    ],
    "useCases": {
      "examples": [
        {
          "title": "시스템 프로그래밍",
          "details": "운영체제, 디바이스 드라이버, 임베디드 시스템 개발"
        },
        {
          "title": "웹 서버",
          "details": "고성능 웹 서버 및 API 서버 개발"
        },
        {
          "title": "게임 개발",
          "details": "성능이 중요한 게임 엔진 및 게임 개발"
        },
        {
          "title": "WebAssembly",
          "details": "브라우저에서 실행되는 고성능 웹 애플리케이션"
        },
        {
          "title": "네트워킹 도구",
          "details": "네트워크 도구 및 프로토콜 구현"
        }
      ],
      "suitable": [
        "성능이 중요한 시스템 소프트웨어",
        "메모리 안전성이 중요한 프로젝트",
        "크로스 플랫폼 애플리케이션",
        "병렬 처리가 필요한 애플리케이션"
      ],
      "unsuitable": [
        "빠른 프로토타이핑이 필요한 프로젝트",
        "스크립팅 작업",
        "GUI 애플리케이션 (아직 생태계가 미성숙)",
        "개발 시간이 중요한 간단한 웹 애플리케이션"
      ]
    }
  }