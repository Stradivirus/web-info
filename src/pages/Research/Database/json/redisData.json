{
    "advantages": [
      {
        "title": "빠른 성능",
        "details": [
          "인메모리 데이터 구조로 인한 초고속 읽기/쓰기 속도",
          "단일 스레드 아키텍처로 인한 일관된 성능",
          "microsecond 단위의 레이턴시"
        ]
      },
      {
        "title": "다양한 데이터 구조",
        "details": [
          "Strings, Lists, Sets, Sorted Sets, Hashes 등 다양한 데이터 타입 지원",
          "복잡한 연산을 단순화할 수 있는 자료구조 제공",
          "비트맵, HyperLogLog 등 특수 데이터 타입 지원"
        ]
      },
      {
        "title": "확장성과 고가용성",
        "details": [
          "마스터-슬레이브 복제를 통한 데이터 안정성",
          "Redis Cluster를 통한 수평적 확장",
          "자동 페일오버 지원으로 고가용성 보장"
        ]
      },
      {
        "title": "원자성 보장",
        "details": [
          "단일 명령어의 원자성 보장",
          "트랜잭션을 통한 복수 명령어의 원자성 지원",
          "경쟁 상태 방지를 위한 잠금 메커니즘 제공"
        ]
      },
      {
        "title": "유연한 데이터 영속성",
        "details": [
          "RDB 스냅샷을 통한 백업 지원",
          "AOF 로그를 통한 명령어 단위 백업",
          "하이브리드 영속성 모드 지원"
        ]
      }
    ],
    "disadvantages": [
      {
        "title": "메모리 제한",
        "details": [
          "가용 메모리 크기에 따른 데이터 저장 제한",
          "메모리 파편화 발생 가능성",
          "대용량 데이터 처리시 비용 증가"
        ]
      },
      {
        "title": "데이터 일관성",
        "details": [
          "비동기 복제로 인한 일시적 데이터 불일치 가능성",
          "네트워크 파티션 발생시 데이터 정합성 보장의 어려움",
          "최종 일관성(eventual consistency) 모델 사용"
        ]
      },
      {
        "title": "장애 복구",
        "details": [
          "메모리 기반 특성으로 인한 데이터 손실 가능성",
          "대규모 데이터셋의 경우 복구 시간 증가",
          "복구 과정에서의 성능 저하"
        ]
      }
    ],
    "useCases": {
      "examples": [
        {
          "title": "세션 관리",
          "details": "사용자 세션 정보를 저장하고 관리하며, 빠른 액세스와 만료 시간 설정 가능"
        },
        {
          "title": "캐싱 시스템",
          "details": "자주 접근하는 데이터를 캐시하여 데이터베이스 부하 감소 및 응답 시간 개선"
        },
        {
          "title": "실시간 분석",
          "details": "실시간 카운터, 통계 데이터 수집 및 분석에 활용"
        },
        {
          "title": "메시지 큐",
          "details": "간단한 pub/sub 시스템 구현 및 일시적인 메시지 버퍼링"
        },
        {
          "title": "레이트 리미팅",
          "details": "API 요청 제한, 사용량 제어 등 레이트 리미팅 구현"
        },
        {
          "title": "리더보드",
          "details": "Sorted Sets를 활용한 실시간 순위표 구현"
        }
      ],
      "suitable": [
        "빠른 응답 시간이 필요한 실시간 애플리케이션",
        "캐시 계층이 필요한 대규모 애플리케이션",
        "분산 잠금이 필요한 시스템",
        "세션 관리가 필요한 웹 애플리케이션",
        "실시간 분석 및 모니터링 시스템"
      ],
      "unsuitable": [
        "대용량 데이터의 영구 저장이 필요한 경우",
        "복잡한 조인 연산이 필요한 경우",
        "강력한 ACID 트랜잭션이 요구되는 경우",
        "메모리 비용이 중요한 제약사항인 경우"
      ]
    },
    "clusteringInfo": {
      "description": "Redis 클러스터는 데이터를 자동으로 여러 노드에 분산하여 저장하고 관리하는 분산 시스템입니다.",
      "advantages": [
        "수평적 확장성 제공",
        "자동 데이터 샤딩",
        "노드 장애시 자동 페일오버",
        "클러스터 노드간 자동 데이터 리밸런싱",
        "다중 마스터-슬레이브 구조 지원"
      ],
      "configurations": [
        "최소 3개의 마스터 노드 필요",
        "각 마스터 노드당 최소 1개의 슬레이브 노드 권장",
        "16384개의 해시 슬롯을 노드들이 분할하여 관리",
        "클라이언트는 MOVED/ASK 리다이렉션을 처리해야 함",
        "클러스터 버스는 기본적으로 16379 포트 사용"
      ]
    },
    "bestPractices": [
      {
        "title": "메모리 관리",
        "details": [
          "maxmemory 설정을 통한 메모리 제한",
          "적절한 eviction 정책 설정",
          "데이터 만료 시간 설정으로 자동 정리"
        ]
      },
      {
        "title": "백업 전략",
        "details": [
          "RDB와 AOF 동시 사용 권장",
          "정기적인 백업 스케줄링",
          "장애 복구 계획 수립"
        ]
      },
      {
        "title": "보안",
        "details": [
          "강력한 패스워드 설정",
          "bind 설정으로 접근 제한",
          "SSL/TLS 암호화 사용"
        ]
      },
      {
        "title": "모니터링",
        "details": [
          "메모리 사용량 모니터링",
          "연결 수 및 명령어 실행 통계 확인",
          "슬로우 로그 모니터링"
        ]
      }
    ]
  }