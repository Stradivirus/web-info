{
  "advantages": [
    {
      "title": "간결하고 읽기 쉬운 문법",
      "details": [
        "코드가 자연어에 가깝게 작성되므로 가독성이 뛰어나며, 팀 협업과 유지보수가 용이합니다.",
        "다른 언어에 비해 학습 곡선이 낮아 초보자에게 적합합니다."
      ]
    },
    {
      "title": "광범위한 생태계와 커뮤니티",
      "details": [
        "풍부한 라이브러리와 프레임워크(NumPy, Pandas, TensorFlow, Django 등)가 다양한 도메인에 활용됩니다.",
        "방대한 커뮤니티 지원으로 문제 해결이 용이하며, 학습 자료와 예제가 풍부합니다."
      ]
    },
    {
      "title": "다목적 사용 가능",
      "details": [
        "웹 개발, 데이터 과학, 머신러닝, 자동화, 스크립트 작업 등 여러 분야에서 활용됩니다.",
        "간단한 스크립팅부터 대규모 시스템 개발까지 가능."
      ]
    },
    {
      "title": "크로스 플랫폼 지원",
      "details": [
        "Windows, MacOS, Linux 등 다양한 운영 체제에서 동일한 코드로 실행 가능합니다."
      ]
    },
    {
      "title": "동적 타입",
      "details": [
        "변수의 타입을 명시하지 않아도 되므로 코드 작성 속도가 빠릅니다.",
        "프로토타입 개발과 빠른 반복 작업에 적합합니다."
      ]
    },
    {
      "title": "풍부한 내장 기능",
      "details": [
        "강력한 표준 라이브러리로 파일 처리, HTTP 요청, 데이터 직렬화 등의 작업을 쉽게 수행할 수 있습니다.",
        "REPL(Read-Eval-Print Loop) 환경을 통해 인터랙티브 코딩 가능."
      ]
    }
  ],
  "disadvantages": [
    {
      "title": "느린 실행 속도",
      "details": [
        "인터프리터 방식으로 실행되므로 C, C++, Go 같은 컴파일 언어에 비해 실행 속도가 느립니다.",
        "계산량이 많은 작업에서는 성능 병목이 발생할 수 있습니다."
      ]
    },
    {
      "title": "동적 타입의 단점",
      "details": [
        "런타임에서 타입 관련 에러가 발생할 가능성이 높습니다.",
        "대규모 프로젝트에서 유지보수가 어렵거나 코드 품질이 낮아질 수 있습니다."
      ]
    },
    {
      "title": "멀티스레드 한계 (GIL 문제)",
      "details": [
        "글로벌 인터프리터 락(GIL)로 인해 멀티스레드 작업에서 병렬 실행이 제한됩니다.",
        "멀티프로세싱이나 외부 라이브러리로 이를 우회해야 함."
      ]
    },
    {
      "title": "메모리 사용량",
      "details": [
        "동적 타입과 가비지 컬렉션으로 인해 메모리 사용량이 높은 편입니다.",
        "제한된 메모리 환경에서 비효율적일 수 있음."
      ]
    },
    {
      "title": "모바일 플랫폼 지원 부족",
      "details": [
        "모바일 앱 개발에 있어 다른 언어들(Java/Kotlin, Swift)보다 활용도가 낮습니다.",
        "모바일 관련 라이브러리가 부족하며 성능 최적화가 어렵습니다."
      ]
    },
    {
      "title": "배포의 어려움",
      "details": [
        "인터프리터와 종속 라이브러리를 포함해야 하므로 실행 파일 크기가 커질 수 있습니다.",
        "패키지 관리를 위해 추가 설정이 필요하며, OS 간 호환성 문제가 발생할 수 있음."
      ]
    }
  ],
  "useCases": {
    "examples": [
      {
        "title": "웹 개발",
        "details": "Django, Flask를 사용한 웹 애플리케이션 개발"
      },
      {
        "title": "데이터 과학 및 머신러닝",
        "details": "Pandas, NumPy, TensorFlow, PyTorch를 활용한 데이터 분석 및 AI 모델 개발"
      },
      {
        "title": "스크립트 및 자동화",
        "details": "데이터 처리, 서버 관리 스크립트 작성 및 자동화 도구 개발"
      },
      {
        "title": "데스크톱 애플리케이션",
        "details": "PyQt, Kivy를 사용한 GUI 애플리케이션 개발"
      },
      {
        "title": "게임 개발",
        "details": "Pygame을 활용한 2D 게임 개발"
      },
      {
        "title": "교육",
        "details": "간단한 문법으로 프로그래밍 기초 교육에 적합"
      }
    ],
    "suitable": [
      "빠르게 개발해야 하는 프로토타입 프로젝트",
      "데이터 과학, 머신러닝, AI 프로젝트",
      "가독성과 유지보수가 중요한 프로젝트",
      "자동화, 스크립팅 작업"
    ],
    "unsuitable": [
      "실시간 처리 및 고성능이 요구되는 작업 (게임 엔진, 고속 연산)",
      "메모리 제약이 엄격한 임베디드 시스템",
      "멀티스레드 병렬 작업이 필수적인 작업"
    ]
  },
  "frameworks": [
    {
      "name": "Django",
      "advantages": [
        "완전한 풀스택 프레임워크로 필요한 대부분의 기능이 내장되어 있음",
        "강력한 ORM과 관리자 패널 제공",
        "보안 기능이 기본적으로 잘 갖춰져 있음",
        "큰 커뮤니티와 풍부한 문서화",
        "다양한 서드파티 패키지 존재"
      ],
      "disadvantages": [
        "학습 곡선이 높음",
        "작은 프로젝트에는 과도할 수 있음",
        "구조가 다소 엄격해서 유연성이 떨어짐",
        "비동기 처리가 기본적으로 지원되지 않음"
      ],
      "bestFor": [
        "대규모 풀스택 웹 애플리케이션",
        "커스텀 admin 인터페이스가 필요한 프로젝트",
        "보안이 중요한 엔터프라이즈급 프로젝트",
        "복잡한 데이터베이스 구조를 가진 프로젝트"
        ]
        },
    {
      "name": "FastAPI",
      "advantages": [
        "현대적인 파이썬 기능(type hints, async/await) 활용",
        "매우 빠른 성능 (Node.js, Go에 견줄만한 속도)",
        "자동 API 문서 생성 (Swagger/OpenAPI)",
        "쉬운 학습 곡선",
        "비동기 처리 기본 지원"
      ],
      "disadvantages": [
        "상대적으로 새로운 프레임워크라 생태계가 작음",
        "풀스택 기능이 부족 (주로 API 개발용)",
        "템플릿 엔진 등 프론트엔드 도구 부족",
        "일부 고급 기능은 직접 구현 필요"
      ],
      "bestFor": [
         "고성능 API 및 마이크로서비스",
        "비동기 처리가 필요한 실시간 서비스",
        "자동화된 API 문서화가 필요한 프로젝트",
        "타입 힌트를 활용한 안정적인 개발이 필요한 경우"
        ]
    },
    {
      "name": "Flask",
      "advantages": [
        "매우 간단하고 배우기 쉬움",
        "유연하고 커스터마이징이 자유로움",
        "필요한 기능만 선택적으로 추가 가능",
        "마이크로 서비스 개발에 적합",
        "가벼운 프로젝트에 이상적"
      ],
      "disadvantages": [
        "대규모 프로젝트시 구조화가 어려울 수 있음",
        "기본 기능이 적어 많은 확장이 필요",
        "일관된 프로젝트 구조를 위한 가이드라인 부족",
        "동시성 처리를 위해선 추가 작업 필요"
      ],
      "bestFor": [
        "빠른 프로토타이핑이 필요한 소규모 프로젝트",
        "단순한 REST API 개발",
        "마이크로서비스 아키텍처",
        "학습과 교육용 프로젝트"
        ]
    },
    {
      "name": "Tornado",
      "advantages": [
        "비동기 처리에 최적화",
        "실시간 서비스에 강점",
        "뛰어난 WebSocket 지원",
        "높은 동시성 처리 능력",
        "내장 HTTP 서버 제공"
      ],
      "disadvantages": [
        "상대적으로 작은 커뮤니티",
        "비동기 코드 작성이 복잡할 수 있음",
        "일반적인 CRUD 앱 개발에는 과도한 스펙",
        "학습 곡선이 가파름"
      ],
      "bestFor": [
        "실시간 웹소켓 기반 애플리케이션",
        "대규모 동시 접속 처리가 필요한 서비스",
        "비동기 네트워크 애플리케이션",
        "스트리밍 서비스"
    ]
    }
  ]
}