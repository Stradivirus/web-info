{
    "advantages": [
      {
        "title": "높은 처리량과 확장성",
        "details": [
          "초당 수백만 건의 메시지 처리 가능",
          "수평적 확장을 통한 처리량 증가",
          "파티션 기반의 분산 처리 구조"
        ]
      },
      {
        "title": "데이터 영속성",
        "details": [
          "디스크에 메시지를 저장하여 데이터 손실 방지",
          "설정된 보관 기간 동안 메시지 유지",
          "장애 발생 시에도 데이터 복구 가능"
        ]
      },
      {
        "title": "고가용성",
        "details": [
          "복제를 통한 데이터 안정성 보장",
          "브로커 장애시 자동 페일오버",
          "다중 데이터센터 지원"
        ]
      },
      {
        "title": "메시지 순서 보장",
        "details": [
          "파티션 내에서 메시지 순서 보장",
          "키 기반 파티셔닝으로 관련 메시지 순서 유지",
          "정확히 한 번 전달(exactly-once) 시맨틱 지원"
        ]
      },
      {
        "title": "유연한 데이터 처리",
        "details": [
          "실시간 및 배치 처리 모두 지원",
          "다양한 데이터 포맷 지원",
          "스트림 처리 기능 제공"
        ]
      }
    ],
    "disadvantages": [
      {
        "title": "운영 복잡성",
        "details": [
          "Zookeeper 의존성 (Kafka 3.0 이전 버전)",
          "클러스터 구성과 관리의 복잡성",
          "적절한 파티션 수 설정의 어려움"
        ]
      },
      {
        "title": "리소스 사용",
        "details": [
          "상당한 디스크 공간 필요",
          "메모리 및 CPU 리소스 소비",
          "네트워크 대역폭 사용량 증가"
        ]
      },
      {
        "title": "모니터링 필요성",
        "details": [
          "지속적인 모니터링과 관리 필요",
          "복잡한 메트릭 추적 요구",
          "성능 튜닝의 어려움"
        ]
      }
    ],
    "useCases": {
      "examples": [
        {
          "title": "로그 수집",
          "details": "다양한 소스에서 발생하는 로그를 중앙 집중화하여 수집 및 처리"
        },
        {
          "title": "이벤트 스트리밍",
          "details": "실시간 이벤트 처리 및 분석, 마이크로서비스 간 이벤트 기반 통신"
        },
        {
          "title": "메트릭 수집",
          "details": "시스템 모니터링 데이터와 비즈니스 메트릭의 실시간 수집 및 분석"
        },
        {
          "title": "데이터 파이프라인",
          "details": "다양한 소스의 데이터를 수집하여 저장소나 분석 시스템으로 전달"
        },
        {
          "title": "실시간 분석",
          "details": "스트리밍 데이터의 실시간 처리 및 분석"
        }
      ],
      "suitable": [
        "대용량 실시간 데이터 처리가 필요한 경우",
        "이벤트 기반 아키텍처",
        "마이크로서비스 간 비동기 통신",
        "데이터 파이프라인 구축",
        "로그 및 메트릭 수집 시스템"
      ],
      "unsuitable": [
        "단순한 메시지 큐가 필요한 경우",
        "리소스가 제한된 환경",
        "작은 규모의 동기식 통신",
        "즉각적인 메시지 처리가 필요한 경우"
      ]
    },
    "clusteringInfo": {
      "description": "Kafka 클러스터는 여러 브로커로 구성되며, 각 브로커는 특정 토픽의 파티션을 호스팅합니다.",
      "advantages": [
        "수평적 확장성",
        "고가용성 보장",
        "부하 분산",
        "데이터 복제",
        "장애 허용성"
      ],
      "configurations": [
        "최소 3개의 브로커 권장",
        "적절한 파티션 수 설정",
        "복제 팩터 구성",
        "토픽별 설정 관리",
        "브로커 리소스 할당"
      ]
    },
    "bestPractices": [
      {
        "title": "토픽 설계",
        "details": [
          "적절한 파티션 수 설정",
          "토픽 보존 기간 설정",
          "키 기반 파티셔닝 전략 수립"
        ]
      },
      {
        "title": "성능 최적화",
        "details": [
          "배치 크기 조정",
          "압축 설정",
          "페이지 캐시 활용"
        ]
      },
      {
        "title": "모니터링",
        "details": [
          "브로커 메트릭 모니터링",
          "컨슈머 지연 추적",
          "디스크 사용량 관리"
        ]
      },
      {
        "title": "보안",
        "details": [
          "ACL 설정",
          "SSL/TLS 암호화",
          "인증 및 인가 구성"
        ]
      }
    ],
    "features": [
      {
        "title": "메시지 브로커",
        "details": [
          "토픽 기반 발행/구독 모델",
          "파티션을 통한 병렬 처리",
          "메시지 압축 지원"
        ]
      },
      {
        "title": "스트림 처리",
        "details": [
          "Kafka Streams API 제공",
          "상태 기반 처리 지원",
          "윈도우 연산 가능"
        ]
      },
      {
        "title": "커넥터 에코시스템",
        "details": [
          "다양한 외부 시스템 연동",
          "Source/Sink 커넥터",
          "커스텀 커넥터 개발 가능"
        ]
      }
    ]
  }